set ProjectName as "Elitebuild"

set BIN_PATH    as "/usr/bin/"
set COMPILER    as "gcc"

set PATH        as "{BIN_PATH}{COMPILER}"

set fn          as "for"
set commandline as "argument"
set echo        as "println"

set Linux       as "linux"
set FreeBSD     as "freebsd"

\\set arguments as string (
\\    "example.cpp",
\\    "main.cpp"
\\)

\\ set flags as string (
\\    f("curl")
\\)

\\ for signal "start"
$fn signal "start" [
    \\ You can also use $ProjectName instead of formatter
    if eq "{ProjectName}" "Elitebuild" [
        \\ println "Hello, Elitebuild"
        $echo "Hello, {ProjectName}!"
    ]

    println "Default compiler is: {COMPILER}"

    set echo as "print"
    $echo "Huh!"

    set echo as "println"

    \\ Prints newline
    $echo

    \\ for argument "hi"
    $fn $commandline "hi" [
        \\ $echo "Hi!"
        println "Hi!"
    ]

    for argument "all" [
        println "There's nothing to do."
    ]

    // Platform-specific functions.
    for specific "{Linux}"   [
        for exists $PATH [
            println "Compiler path found: {PATH}"
        ]

        println "Linux-based"
    ]

    for specific "{FreeBSD}" [
        println "FreeBSD"
    ]

    \\for argument("make") [
    \\    for specific("linux") [
    \\        use commandline(
    \\            $COMPILER,
    \\            $arguments,
    \\            $flags
    \\        )
    \\        print "hello, world"
    \\
    \\        use commandline(
    \\            "echo",
    \\            "hello, world"
    \\        )
    \\    ]
    \\]

    for specific $Linux   [
        use exec   "echo 'Hello, {ProjectName} from syscall! ({Linux}-based)'"
        use signal "exit"
    ]

    for specific $FreeBSD [ use exec  "uname --a" ]
]